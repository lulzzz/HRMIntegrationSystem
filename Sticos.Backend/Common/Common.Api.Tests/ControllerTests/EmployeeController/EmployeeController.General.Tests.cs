using Common.Api.Tests.Factories.Domain;
using NUnit.Framework;
using Shared.Interfaces;
using Shared.TestCommon;
using System.Collections.Generic;
using System.Threading.Tasks;
using TestCommon.DataFactories;
using contract = Common.Api.Contracts.Employees;

namespace Common.Api.Tests.ControllerTests.Employees
{

    [TestFixture]
    public class EmployeeControllerGeneralTests : EmployeeControllerTestsBase
    {
        protected const int NUMBER_OF_AUTOGENERATED_EMPLOYEES = 150;

        [SetUp]
        public async Task SetupForEachTest()
        {
            var employees = EmployeeFactory.GetFactory().Generate(NUMBER_OF_AUTOGENERATED_EMPLOYEES);
            await AddToPersonalDb(employees);
            var user = DbUserFactory.GetFactory(_customerId, _currentUserId).Generate(1);
            await AddToPersonalCommonDb(user);
            await AddPersonalAdminPermissionForUsers();
        }

        [Test]
        public async Task RequestingEmployees_200OKAndList()
        {

            var url = $"{_customerId}/employees";

            var employeeList = await _client.GetAsyncAndDeserialize<List<contract.Employee>>(url);

            Assert.IsNotNull(employeeList);
            Assert.AreEqual(SearchConstants.DEFAULT_TAKE, employeeList.Count);
        }

        [Test]
        public async Task RequestingEmployees_Skip()
        {
            var skip = NUMBER_OF_AUTOGENERATED_EMPLOYEES - SearchConstants.DEFAULT_TAKE / 2;
            var url = $"{_customerId}/employees?skip={skip}";

            var employeeList = await _client.GetAsyncAndDeserialize<List<contract.Employee>>(url);

            Assert.IsNotNull(employeeList);
            Assert.AreNotEqual(SearchConstants.DEFAULT_TAKE, employeeList.Count);
        }

        [Test]
        public async Task RequestingEmployees_Take()
        {
            var take = NUMBER_OF_AUTOGENERATED_EMPLOYEES;
            var url = $"{_customerId}/employees?take={take}";

            var employeeList = await _client.GetAsyncAndDeserialize<List<contract.Employee>>(url);

            Assert.IsNotNull(employeeList);
            Assert.AreNotEqual(SearchConstants.DEFAULT_TAKE, employeeList.Count);
            Assert.AreEqual(take, employeeList.Count);
        }
    }
}
